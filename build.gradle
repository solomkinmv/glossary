def jsonWebTokenVersion = '0.7.0'
def httpClientVersion = '4.5.2'
def awsSdkVersion = '1.11.181'
def jlayerVersion = '1.0.1'
def flickrVersion = '2.16'
def guavaVersion = '21.0'
def lombokVersion = '1.18.0'
def jaxbApiVersion = '2.3.0'
def activationVersion = '1.1.1'
def thumbnailatorVersion = '0.4.8'
def wiremockVersion = '2.14.0'
def feignFormVersion = '3.3.0'
def playtikaTestcontainersVersion = '1.6'
def jacocoVersion = '0.8.1'

ext {
    springCloudVersion = 'Finchley.RELEASE'

    awsSdk = "com.amazonaws:aws-java-sdk:${awsSdkVersion}"
    jsonwebtoken = "io.jsonwebtoken:jjwt:${jsonWebTokenVersion}"
    jlayer = "javazoom:jlayer:${jlayerVersion}"
    flickr4java = "com.flickr4java:flickr4java:${flickrVersion}"
    guava = "com.google.guava:guava:${guavaVersion}"
    httpClient = "org.apache.httpcomponents:httpclient:${httpClientVersion}"
    fluentHC = "org.apache.httpcomponents:fluent-hc:${httpClientVersion}"
    lombok = "org.projectlombok:lombok:${lombokVersion}"
    jaxbApi = "javax.xml.bind:jaxb-api:${jaxbApiVersion}"
    jaxbCore = "com.sun.xml.bind:jaxb-core:${jaxbApiVersion}"
    jaxbImpl = "com.sun.xml.bind:jaxb-impl:${jaxbApiVersion}"
    activation = "javax.activation:activation:${activationVersion}"
    thumbnailator = "net.coobird:thumbnailator:${thumbnailatorVersion}"
    wiremock = "com.github.tomakehurst:wiremock-standalone:${wiremockVersion}"
    feignForm = "io.github.openfeign.form:feign-form:${feignFormVersion}"
    feignFormSpring = "io.github.openfeign.form:feign-form-spring:${feignFormVersion}"
    playtikaTestcontainers = "com.playtika.testcontainers:embedded-mariadb:${playtikaTestcontainersVersion}"
}

buildscript {
    ext {
        springBootVersion = '2.0.3.RELEASE'
        palantirDockerPluginVersion = '0.20.0'
    }

    repositories {
        mavenCentral()
        maven { url 'https://repo.spring.io/libs-snapshot' }
        maven { url 'https://repo.spring.io/libs-milestone' }
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath("gradle.plugin.com.palantir.gradle.docker:gradle-docker:${palantirDockerPluginVersion}")
    }
}

allprojects {
    // todo: remove this block after migration to microservices
    group 'io.github.solomkinmv'
    version '0.0.2-SECURITY-SNAPSHOT'

    repositories {
        mavenCentral()
        jcenter()
        maven { url 'https://repo.spring.io/libs-milestone' }
    }

    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'jacoco'

    jacoco {
        toolVersion = jacocoVersion
    }

    sourceCompatibility = 10
    targetCompatibility = 10

    compileJava {
        options.compilerArgs << '-parameters'
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }
}

subprojects {
    apply plugin: 'org.springframework.boot'
}

task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled true
        xml.destination new File("${buildDir}/reports/jacoco/report.xml")
        html.enabled false
        csv.enabled false
    }
}

// always run the tests before generating the report
codeCoverageReport.dependsOn {
    subprojects*.test
}